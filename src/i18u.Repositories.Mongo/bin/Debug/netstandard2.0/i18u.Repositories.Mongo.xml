<?xml version="1.0"?>
<doc>
    <assembly>
        <name>i18u.Repositories.Mongo</name>
    </assembly>
    <members>
        <member name="T:i18u.Repositories.Mongo.IMongoModel">
            <summary>
            An entity stored in Mongo.
            </summary>
        </member>
        <member name="P:i18u.Repositories.Mongo.IMongoModel.Id">
            <summary>
            The non-unique _id field.
            </summary>
        </member>
        <member name="T:i18u.Repositories.Mongo.IMongoRepository`1">
            <inheritdoc />
        </member>
        <member name="T:i18u.Repositories.Mongo.IMongoRepository`2">
            <summary>
            A repository for reading and writing from Mongo.
            </summary>
            <typeparam name="TModel">The entity type to query against in Mongo.</typeparam>
            <typeparam name="TProjection">The entity type to retrieve from Mongo for read operations.</typeparam>
        </member>
        <member name="M:i18u.Repositories.Mongo.IMongoRepository`2.Insert(`0)">
            <summary>
            Inserts the provided entity into Mongo.
            </summary>
            <param name="model">The entity to insert.</param>
            <returns>A <see cref="T:i18u.Repositories.Mongo.Results.IInsertResult"/> representing the outcome.</returns>
        </member>
        <member name="M:i18u.Repositories.Mongo.IMongoRepository`2.InsertMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the provided entities into Mongo.
            </summary>
            <param name="model">The entities to insert.</param>
            <returns>A <see cref="T:i18u.Repositories.Mongo.Results.IInsertResult"/> representing the outcome.</returns>
        </member>
        <member name="M:i18u.Repositories.Mongo.IMongoRepository`2.Update(MongoDB.Bson.ObjectId,MongoDB.Driver.UpdateDefinition{`0})">
            <summary>
            Updates the entity(s) in Mongo that match the provided <see cref="T:MongoDB.Bson.ObjectId"/>.
            </summary>
            <param name="id">The <see cref="T:MongoDB.Bson.ObjectId"/> of the entity(s) to update.</param>
            <param name="updateDefinition">The <see cref="T:MongoDB.Driver.UpdateDefinition`1"/> to apply to the entity(s).</param>
            <returns>A <see cref="T:i18u.Repositories.Mongo.Results.IUpdateResult"/> representing the outcome.</returns>
        </member>
        <member name="M:i18u.Repositories.Mongo.IMongoRepository`2.UpdateMany(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.UpdateDefinition{`0})">
            <summary>
            Updates the entity(s) in Mongo that match the provided <see cref="T:MongoDB.Driver.FilterDefinition`1"/>.
            </summary>
            <param name="filterDefinition">The <see cref="T:MongoDB.Driver.FilterDefinition`1"/> to identify the entity(s) to update.</param>
            <param name="updateDefinition">The <see cref="T:MongoDB.Driver.UpdateDefinition`1"/> to apply to the entity(s).</param>
            <returns>A <see cref="T:i18u.Repositories.Mongo.Results.IUpdateResult"/> representing the outcome.</returns>
        </member>
        <member name="M:i18u.Repositories.Mongo.IMongoRepository`2.Delete(MongoDB.Bson.ObjectId)">
            <summary>
            Deletes the entity(s) in Mongo that match the provided <see cref="T:MongoDB.Bson.ObjectId"/>.
            </summary>
            <param name="id">The <see cref="T:MongoDB.Bson.ObjectId"/> of the entity(s) to delete.</param>
            <returns>A <see cref="T:i18u.Repositories.Mongo.Results.IDeleteResult"/> representing the outcome.</returns>
        </member>
        <member name="M:i18u.Repositories.Mongo.IMongoRepository`2.DeleteMany(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            Deletes the entity(s) in Mongo that match the provided <see cref="T:MongoDB.Driver.FilterDefinition`1"/>.
            </summary>
            <param name="filterDefinition">The <see cref="T:MongoDB.Driver.FilterDefinition`1"/> to identify the entity(s) to delete.</param>
            <returns>A <see cref="T:i18u.Repositories.Mongo.Results.IDeleteResult"/> representing the outcome.</returns>
        </member>
        <member name="T:i18u.Repositories.Mongo.Interop.IMongoClient">
            <summary>
            A connection to MongoDB.
            </summary>
        </member>
        <member name="M:i18u.Repositories.Mongo.Interop.IMongoClient.GetDatabase(System.String)">
            <summary>
            Retrieves a database object with the given name.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>The <see cref="T:i18u.Repositories.Mongo.Interop.IMongoDatabase"/> object.</returns>
        </member>
        <member name="T:i18u.Repositories.Mongo.Interop.IMongoCollection`1">
            <summary>
            A mongo database collection.
            </summary>
            <typeparam name="T">The type of entities stored in the collection.</typeparam>
        </member>
        <member name="M:i18u.Repositories.Mongo.Interop.IMongoCollection`1.Find(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            Finds entities by the given filter.
            </summary>
            <param name="filter">The filter by which to find entities.</param>
            <returns>The entities found by the filter.</returns>
        </member>
        <member name="T:i18u.Repositories.Mongo.Interop.IMongoDatabase">
            <summary>
            Represents a mongo database.
            </summary>
        </member>
        <member name="M:i18u.Repositories.Mongo.Interop.IMongoDatabase.GetCollection``1(System.String)">
            <summary>
            Retrieves the collection object from Mongo.
            </summary>
            <param name="collectionName">The name of the collection to retrieve.</param>
            <typeparam name="T">The type of entity stored in the collection.</typeparam>
            <returns>The <see cref="T:i18u.Repositories.Mongo.Interop.IMongoCollection`1"/>.</returns>
        </member>
        <member name="T:i18u.Repositories.Mongo.Interop.MongoClient">
            <inheritdoc cref="T:i18u.Repositories.Mongo.Interop.IMongoClient" />
        </member>
        <member name="M:i18u.Repositories.Mongo.Interop.MongoClient.GetDatabase(System.String)">
            <inheritdoc cref="M:i18u.Repositories.Mongo.Interop.IMongoClient.GetDatabase(System.String)" />
        </member>
        <member name="M:i18u.Repositories.Mongo.Interop.MongoClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:i18u.Repositories.Mongo.Interop.MongoClient" /> class.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect on.</param>
            <param name="username">The username of the user to authenticate as.</param>
            <param name="password">The password of the user to authenticate as.</param>
        </member>
        <member name="T:i18u.Repositories.Mongo.Interop.MongoDatabase">
            <summary>
            A mongo database.
            </summary>
        </member>
        <member name="M:i18u.Repositories.Mongo.Interop.MongoDatabase.GetCollection``1(System.String)">
            <summary>
            A mongo collection.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <typeparam name="T">The type of the collection's entities.</typeparam>
            <returns>The mongo collection.</returns>
        </member>
        <member name="M:i18u.Repositories.Mongo.Interop.MongoDatabase.#ctor(MongoDB.Driver.IMongoDatabase)">
            <summary>
            Creates a new instance of the <see cref="T:i18u.Repositories.Mongo.Interop.MongoDatabase"/> class.
            </summary>
            <param name="database">The underlying <see cref="T:i18u.Repositories.Mongo.Interop.IMongoDatabase"/> class.</param>
        </member>
        <member name="T:i18u.Repositories.Mongo.IReadOnlyMongoRepository`1">
            <summary>
            A read-only repository for Mongo.
            </summary>
            <typeparam name="TModel">The database model.</typeparam>
        </member>
        <member name="T:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2">
            <summary>
            A read-only repository for Mongo.
            </summary>
            <typeparam name="TModel">The database model.</typeparam>
            <typeparam name="TProjection">The projection to return.</typeparam>
        </member>
        <member name="M:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2.Get(MongoDB.Bson.ObjectId)">
            <summary>
            Retrieves an object by its <see cref="T:MongoDB.Bson.ObjectId"/> (_id) field.
            </summary>
            <param name="id">The <see cref="T:MongoDB.Bson.ObjectId"/> to retrieve the document by.</param>
            <returns>The object retrieved by the _id query.</returns>
        </member>
        <member name="M:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2.Get(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            Retrieves a collection of objects by the provided <see cref="T:MongoDB.Driver.FilterDefinition`1"/>.
            </summary>
            <param name="filter">The <see cref="T:MongoDB.Driver.FilterDefinition`1"/> by which to retrieve the models.</param>
            <returns>The matching documents from Mongo.</returns>
        </member>
        <member name="M:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2.Get(MongoDB.Driver.FilterDefinition{`0},System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of objects by the provided <see cref="T:MongoDB.Driver.FilterDefinition`1"/>.
            </summary>
            <param name="filter">The <see cref="T:MongoDB.Driver.FilterDefinition`1"/> by which to retrieve the models.</param>
            <param name="skip">The number of entities to skip.</param>
            <param name="limit">The maximum number of entities to return.</param>
            <returns>The matching documents from Mongo.</returns>
        </member>
        <member name="M:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retrieves a collection of objects by the provided <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Func`2"/>.
            </summary>
            <param name="filter">The <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Func`2"/> by which to retrieve the models.</param>
            <returns>The matching entities from Mongo.</returns>
        </member>
        <member name="M:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Retrieves a collection of objects by the provided <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Func`2"/>.
            </summary>
            <param name="filter">The <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Func`2"/> by which to retrieve the models.</param>
            <param name="skip">The number of entities to skip.</param>
            <param name="limit">The maximum number of entities to return.</param>
            <returns>The matching entities from Mongo.</returns>
        </member>
        <member name="T:i18u.Repositories.Mongo.MongoRepository`1">
            <inheritdoc cref="T:i18u.Repositories.Mongo.IMongoRepository`1" />
        </member>
        <member name="M:i18u.Repositories.Mongo.MongoRepository`1.#ctor(i18u.Repositories.Mongo.Interop.IMongoClient,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:i18u.Repositories.Mongo.ReadOnlyMongoRepository`1"/> class.
            </summary>
            <param name="client">The <see cref="T:i18u.Repositories.Mongo.Interop.IMongoClient"/> to use.</param>
            <param name="database">The name of the database to use.</param>
            <param name="collection">The name of the collection to use.</param>
        </member>
        <member name="T:i18u.Repositories.Mongo.MongoRepository`2">
            <inheritdoc cref="T:i18u.Repositories.Mongo.IMongoRepository`2"/>
        </member>
        <member name="M:i18u.Repositories.Mongo.MongoRepository`2.#ctor(i18u.Repositories.Mongo.Interop.IMongoClient,System.String,System.String,MongoDB.Driver.ProjectionDefinition{`0,`1})">
            <summary>
            Creates a new instance of the <see cref="T:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2"/> class.
            </summary>
            <param name="client">The <see cref="T:i18u.Repositories.Mongo.Interop.IMongoClient"/> to use.</param>
            <param name="database">The name of the database to use.</param>
            <param name="collection">The name of the collection to use.</param>
            <param name="projection">The <see cref="T:MongoDB.Driver.ProjectionDefinition`2"/> to use.</param>
        </member>
        <member name="M:i18u.Repositories.Mongo.MongoRepository`2.Delete(MongoDB.Bson.ObjectId)">
            <inheritdoc />
        </member>
        <member name="M:i18u.Repositories.Mongo.MongoRepository`2.DeleteMany(MongoDB.Driver.FilterDefinition{`0})">
            <inheritdoc />
        </member>
        <member name="M:i18u.Repositories.Mongo.MongoRepository`2.Insert(`0)">
            <inheritdoc />
        </member>
        <member name="M:i18u.Repositories.Mongo.MongoRepository`2.InsertMany(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:i18u.Repositories.Mongo.MongoRepository`2.Update(MongoDB.Bson.ObjectId,MongoDB.Driver.UpdateDefinition{`0})">
            <inheritdoc />
        </member>
        <member name="M:i18u.Repositories.Mongo.MongoRepository`2.UpdateMany(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.UpdateDefinition{`0})">
            <inheritdoc />
        </member>
        <member name="T:i18u.Repositories.Mongo.ReadOnlyMongoRepository`1">
            <inheritdoc cref="T:i18u.Repositories.Mongo.IReadOnlyMongoRepository`1" />
        </member>
        <member name="M:i18u.Repositories.Mongo.ReadOnlyMongoRepository`1.#ctor(i18u.Repositories.Mongo.Interop.IMongoClient,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:i18u.Repositories.Mongo.ReadOnlyMongoRepository`1"/> class.
            </summary>
            <param name="client">The <see cref="T:i18u.Repositories.Mongo.Interop.IMongoClient"/> to use.</param>
            <param name="database">The name of the database to use.</param>
            <param name="collection">The name of the collection to use.</param>
        </member>
        <member name="T:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2">
            <inheritdoc cref="T:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2"/>
        </member>
        <member name="F:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2.Projection">
            <summary>
            The <see cref="T:MongoDB.Driver.ProjectionDefinition`2"/> to convert 
            from the mongo entity to the projection entity.
            </summary>
        </member>
        <member name="F:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2.Collection">
            <summary>
            The <see cref="T:MongoDB.Driver.IMongoCollection`1"/> to retrieve entities from.
            </summary>
        </member>
        <member name="M:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2.#ctor(i18u.Repositories.Mongo.Interop.IMongoClient,System.String,System.String,MongoDB.Driver.ProjectionDefinition{`0,`1})">
            <summary>
            Creates a new instance of the <see cref="T:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2"/> class.
            </summary>
            <param name="client">The <see cref="T:i18u.Repositories.Mongo.Interop.IMongoClient"/> to use.</param>
            <param name="database">The name of the database to use.</param>
            <param name="collection">The name of the collection to use.</param>
            <param name="projection">The <see cref="T:MongoDB.Driver.ProjectionDefinition`2"/> to use.</param>
        </member>
        <member name="M:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2.Get(MongoDB.Bson.ObjectId)">
            <inheritdoc cref="T:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2"/>
        </member>
        <member name="M:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2.Get(MongoDB.Driver.FilterDefinition{`0})">
            <inheritdoc cref="T:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2"/>
        </member>
        <member name="M:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2.Get(MongoDB.Driver.FilterDefinition{`0},System.Int32,System.Int32)">
            <inheritdoc cref="T:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2"/>
        </member>
        <member name="M:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc cref="T:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2"/>
        </member>
        <member name="M:i18u.Repositories.Mongo.ReadOnlyMongoRepository`2.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <inheritdoc cref="T:i18u.Repositories.Mongo.IReadOnlyMongoRepository`2"/>
        </member>
        <member name="T:i18u.Repositories.Mongo.Results.DeleteResult">
            <inheritdoc cref="T:i18u.Repositories.Mongo.Results.IDeleteResult" />
        </member>
        <member name="T:i18u.Repositories.Mongo.Results.IDeleteResult">
            <summary>
            The result of a delete operation.
            </summary>
        </member>
        <member name="T:i18u.Repositories.Mongo.Results.IInsertResult">
            <summary>
            The result of an insert operation.
            </summary>
        </member>
        <member name="P:i18u.Repositories.Mongo.Results.IInsertResult.Ids">
            <summary>
            The IDs generated from the insert operation.
            </summary>
        </member>
        <member name="T:i18u.Repositories.Mongo.Results.InsertResult">
            <summary>
            Represents the result of an insert operation.
            </summary>
        </member>
        <member name="T:i18u.Repositories.Mongo.Results.IResult">
            <summary>
            Repesents a result from a mongo operation
            </summary>
        </member>
        <member name="P:i18u.Repositories.Mongo.Results.IResult.TimeTaken">
            <summary>
            The time taken to perform the operation.
            </summary>
        </member>
        <member name="P:i18u.Repositories.Mongo.Results.IResult.DocumentsAffected">
            <summary>
            The number of documents affected by the operation.
            </summary>
        </member>
        <member name="T:i18u.Repositories.Mongo.Results.IUpdateResult">
            <summary>
            The result of an update operation.
            </summary>
        </member>
        <member name="T:i18u.Repositories.Mongo.Results.Result">
            <inheritdoc />
        </member>
        <member name="P:i18u.Repositories.Mongo.Results.Result.TimeTaken">
            <inheritdoc />
        </member>
        <member name="P:i18u.Repositories.Mongo.Results.Result.DocumentsAffected">
            <inheritdoc />
        </member>
        <member name="T:i18u.Repositories.Mongo.Results.UpdateResult">
            <inheritdoc cref="T:i18u.Repositories.Mongo.Results.IUpdateResult" />
        </member>
    </members>
</doc>
